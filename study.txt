
+프로젝트 딴예에서는 모듈과 버전 패키지 맞추기. 없는 패키지가 있음

new project

name : mvc-practice
language : java
build system : gradle
jdk : temurin-11
gradle dsl : groovy

main의 class이름변경
WebApplicationServer

Build.gradle에서 dependencies추가

tomcat-embed-core
implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.5'
tomcat-embed-jasper
implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '10.1.5'


javax.servlet-api
compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
jstl:1.2
implementation group: 'javax.servlet', name: 'jstl', version: '1.2'

logback-classic:1.2.3
testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.5'

총 4개 
-------


그 다음에 코드 블라블라 작성

webapps라는 폴더 생성

cmd + 세미콜론 = project structure에서 modules에서 main에서의 paths에서
build대신 webapps/WEB-INF로 변경 / test도 똑같이 변경해주기.

cmd + 쉼표 = preferences에서 gradle검색 - build and run using:, run tests using 를 intellij idea로 바꾸기.

-------개발 환경 구성하기.

docker desktop 설치
docker hub 에서 mysql 설치 docker pull mysql:latest

docker run --name mysql-sample-container -e MySQL_ROOT_PASSWORD=<password> -d -p 3306:3306 mysql: {version}
docker run --name mysql-sample-container -e MySQL_ROOT_PASSWORD=test -d -p 3306:3306 mysql: latest

docker ps

docker exec -it{도커 컨테이너 이름} bash
mysql -u root -P

-------객체지향 패러다임 1. 테스트코드 실습
junit5 사용
ssertj 라이브러리 사용

name : oop-practice
language: java
build system: gradle
jdk : temurin-11
gradle dsl : groovy

preferences 에서 gradle에서 build and run using, run tests using: intellij idea로

build.gradle에서 dependencies에서 assertj추가. 3.23.1

비밀번호 유효성 검증기 만들기.

cmd+n을 통해 junit에서 테스트 코드를 생성 할 수 있다.

dependencies에서 implementation으로 junit-jupiter-params:5.8.2를 추가함.


-------게시판 서비스 만들기. 그냥 게시판 만들기.
intellij, git 2.36.1, github, gitkraken pro 8.5.0
java17, spring boot 2.7.0, gradle 7.4.1, girkraken,

기능 플러그인 : camelcase, gitroolbox, jpa buddy, key promoter x, presentation assistant, ideolog, spring boot assistant

색상, 테마 : ansi highlighter, atom material icons, grep console, one dark theme

git -> new repository -> project-board -> private
master를 main으로 바꿈.

issues -> milestone -> 마일스톤 만들기.
full requests에서 코드리뷰 -> 
칸반보드 backlog를 통해서 projects할 수 있음.

assignees : 나
labels : enhancement
milestone : ?
status : ready
repository : project-board
priority : medium
size : medium

api 만들기

* [ ] api 기능 조사하기
* [ ] 게시판 api
* [ ] 게시글 api
* [ ] 댓글 api


옮기는거 자동화 시키기.
projects -> settings
project name -> board pro v1
workflows

setting에서 field를 추가할 수 있다.
backlog 밑으로 가는 동그라미 누르면 여러 기능 사용할 수 있음. 저장 기능 사용하기. 정렬 기능도 사용 가능 
discussions을 통해서 상호 협력 가능 

깃 브런치: preview아래에서 close with comment누르면 성공했다는 표시.
workflows에서 item closed를 통해 완료된건 자동으로 종료할 수 있게 할 수 있음.

new상태가 필요하지 않으니 다 backlog로 바꾼다.
그리고 쓰레기 같은 new를 없앤다. setting -> status -> new 제거.



gitkraken 에서 cmd+, 를 사용해 설정에 들어감.
gitflow 설정. mater -> dummy / develop -> main

new brach -> dummy ->

github issues 오른쪽에 보면 작은 + 버튼 있음. 눌러주기.

gitflow 옆에 추가 버튼 클릭 -> start feature에서 이름은 feature/#3-(부연설명)으로 설정 current branch로 .
다른 방법으로 branch를 누르고 feature/#3-gitflow 이렇게 작성해야 함.

push push로 업데이트

-------유즈케이스 작성
app.diagrams.net -> github에 저장 -> uml카테고리에서 작성하기. 없어도 됨. basic에서 blank diagram으로 작성. github연동하고 select folder설정하기(프로젝트 폴더) 
girkraken에 가서 terminal 실행 mkdir document -> ll로 파일 목록 조회
touch document/use-case.svg -> ll document -> gitkraken 오른쪽 패널에서 stage all changes -> git project에서 유즈를 설정하기. -> labels, assigness, milestone, repository 설정
gitkraken에서 gitflow -> feature/#4-usecase 생성.

commit message란에 #4 - 게시판 서비스 유즈 케이스 작성 이라고 적기. -> push
feature/#4-usecase/document -> ok -> commit message: #4 - diagrams.net이용해서 file name은 use-case라고 만들기.


diagrams에서
actor생성. 
frame생성.
activity생성

다 그렸으면 diagrams에서 내보내기 -> svg
gitkraken 에 돌아와서 force push ?
new pull request | compare&pull request -> 
assignees, labels, projects, milestone

name: 게시판 서비스 유즈케이스 작성
document/use-case.svg


full requests -> file changed -> 확인 했으면 viewed
-> finish your review
-> merge pull request -> delete merge


-------api 설계
diagrams은 퍼블리시링크를 만들 수 있다.
google shreadsheets -> minnki19 에 저장해둠

------- 스프링 부트 시작하기.
스프링 부트 프로젝트 시작하기 보드에서
스프링 부트 프로젝트로 루트 디렉토리를 초기홯 하고, 개발 바탕을 만든다.
* [ ] spring initailzr로 디렉토리 초기화하기

assigness, convert to issue 설정, lavels은 engancement, milestone설정.

setting -> custom fields -> new field -> 스프린트 이름으로 하고, 
iteration 옵션, 월요일 부터 시작해서, 1주일 동안.

다시 돌아와서 board project v1에서 new view-> 이름을 스프린트 뷰로 설정
-> board -> column field를 스프린트로 설정. ->
스프린트1 -> 스프링 부트 프로젝트 시작하기, 도메인 설계, 데이터베이스 접근 로직 테스트 정리,
데이터베이스 접근 로직 그현, 게시판 api만들기, 게시판 서비스 뷰 만들기

스프린트2 -> 게시판 서비스 뷰에 기능 구현하기. 게시판 페이징 구현, 게시판 정렬 구현,
게시판 검색 구현, 게시글 댓글 구현, 인증 기능 구현

스프린트3 -> 깃헙 릴리즈하기, 헤로쿠에 배포하기

그 후 다시 backlog에 돌아와서 ready에 스프린트1만 넣기.

다시 gitkraken에 돌아와서
gitflow에 있는 main에서 full옆에 있는 화삺표에서 full(fast-forward only)누르기.

깨끗하게 해주기 위해.
main에서 #3 delete feature/#3-gitflow 하기.
#4 도 delete


git flow start feature
feature/#6-boot (current branch)

intellij -> new pro -> spring initializr
start.spring.io

name
project-board
location
~/Documents/github/pro
Type
gradle
group
com.board
artifact
project
jdk
openjdk-17 oracle or eclipse temurin(adoptopenjdk hotspot) 17.0.3
나는 openjdk-20
next

spring boot: 2.7.0
check
download pre-built shared indexes ....
dependencies
spring boot devtools, lombok, spring web, spring boot actuator

시발.
11버전
11버전
2.7. 몇 버전
으로 함


gitignore.io
java, gradle, intellij+all, window, macos, visualStudioCode 

#!.idea/codeStyles
#!.idea/runConfigurations

#6 - 스프링 부트 프로젝트 시작 스프링 부트 프로젝트 초기화 들어간 기술 * 스프링웹 * 엑츄에이터 * 데브툴즈 * 롬복

gitkraken -> stage all changes -> commit -> push -> gitpage에서  full requests -> file changed -> viewed box check -> review changes -> comment

gitkraken main chick full(fast-forward only)



------- 02. 도메인 설계(1)
backlog에 있는 도메인 설계 convert to issue
diagrams -> erd -> filename: project-board-erd.svg

girkraken에서 remote에 있는 거 지우면 깃허브에도 지워짐.

gitkraken -> feature #8-domain 만들기. -> push -> submit

diagrams -> Entity Relation -> table -> 

1 mandatory to many optional
commit message: #8 - ERD 그림 완성 : project-board-erd.svg

gitkraken -> patch


------- 02. 도메인 설계(2)

add file to git -> cancel

intellij에서 main/java/com.projectboard/domain/   Article생성. 
intellij -> article.java -> private Long id; private String title; private String hashtag; private LocalDateTime createdAt; private String createdBy; private LocalDateTime modifiedAt; private String modifiedBy;

intellij -> articlecomment.java -> private Long id; private Article article; private String content; private LocalDateTime createdAt; private String createdBy; private LocalDateTime modifiedAt; private String modifiedBy;

gitkraken -> full(fast-forward only) -> staged file로 하고 -> commit message 작성. #8 - 도메인 클래스 설계(게시글, 댓글) 도메인 정보를 설계해 보았다. 기초적인 게시글과 댓글 표현이 가능하도록 함. DB와 연동을 위한 추가적인 표현은 추후에 업데이트될 수 있음. -> commit changes to  -> push -> 

git-> full requests -> compare & pull request -> title: 도메인 설계 -> write: 게시판 서비스 구현을 위한 기초적인 도메인 정보를 설계해 보았다. This closes #8 -> assignees, labels: documentation, enhancement, project, milestone -> create pull request -> file changed -> view -> merge full request

gitkraken -> feature #8 -> fatch -> gitflow main -> full(fast) -> fitflow #8 delete -> 도메인 설계 done

------- 데이터베이스 접근 로직
db-engines.com/en/ranking

github -> backlog 데이터베이스 접근 로직 #10 설정 -> 
gitkraken -> feature -> #10-db생성 ->

mysql install -> https://dev.mysql.com/downloads/mysql/

intellij -> 데이터베이스 -> + -> data source -> mysql -> comment : local db -> user: root -> test connection을 통해서 제대로 작동하는지 확인. -> apply -> ok



intellij database console -> show databases; create database board;
-> 데이터 소스 및 드라이버

intellij database console -> 
create user 'uno'@'localhost' identified by '1234';
select `user` from `mysql`.`user`;

show grants for 'uno'@'localhost';
grant all on `board`.* to 'uno'@'localhost' with grant option;
flush privileges;

start.spring.io -> gradle project -> add dependencies... -> jap 추가, mysql driver, h2 -> exporel -> 필요한거 복사 -> build.gradle 붙여넣기 -> 새로고침

gitkraken에서 확인.
intellij -> jpa buddy확장 프로그램 설치
intellij -> resources -> application.properties -> application.yaml 으로 rename -> 

코딩을 받아 적어야 하는데 깃 허브 가서 가져오기.
가져온 코드중에 바궈야 할것.

debug: false
com.board.project - 주소 바꿔야 함.
password: 1234
driver-class-name: com.mysql.cj.jdbc.driver
open-in-view: false를 지우기.
h2.console.enabled: true
data.rest: 포함 밑에 있는 2줄도 지우기.

resources/data.sql

cmd+enter

------- 02. 데이터베이스 접근 로직 테스트 정의2
intellij -> test/java/com.board.project/projectBoardApplicationTests -> class 실행해서 테스트

intellij entity 설정->
diagrams -> erd -> content 본문을 10000자로 수정, 댓글은 500자 -> commitmessage:#10-erdupdate
gitkraken->fetch->pull(fastforwardonly)

intellij -> Article.java file

packge - lombok., org.springframework.data.annotation., javax.

@Getter@ToString@Table(indexes={
    @Index(columnList="title"),    @Index(columnList="hashtag"),    @Index(columnList="createdAt"),    @Index(columnList="createdBy")})
@Entity
public class Article{@Id@GeneratedValue(strategy=GenerationType.IDENTITY)private Long id;@Setter @Column(nullable=false) private String title; @Setter @Column(nullable=false, length=10000) private String content; @Setter private String hashtag;
@CreatedDate @Column(nullable=false) private LocalDateTime createdAt;@CreatedBy @Column(nullable=false, length=100) private String createdBy;@LastModifiedDate @Column(nullable=false) private LocalDateTime modifiedAt;@LastModifiedBy @Column(nullable=false, length=100) private String modifiedBy;
protected Article(){}
private Article(String title, String content, String hashtag){this.title=title;
this.content=content;
this.hashtag=hashtag;
}
public static Article of(String title, String content, String hashtag){return new Article(title, content, hashtag);
}
@Override public boolean equals(Object o){if(this==o) return ture;
if(!(o instanceof Article article))return false;
return id!=null&&id.equals(article.id);
}
@Override public int hashCode(){return Objects.hash(id);
}}

//대문자 소문자 구분 안하면 오류생김.. 시발시발시발


com.project.board.config.JpaConfig.java file

@Configuration@EnableJpaAuditing
public class JpaConfig{@Bean
public AuditorAware<String>auditorAware(){return()->Optional.of("uno");//todo: 스프링 시큐리티로 인증 기능을 붙이게 될 때, 수정하자
}}


------- 03. 데이터베이스 접근 로직 테스트 정의3
package com.projectboard.domain; // 이거 주소 맞으려나?
ArticleComment.java
@Getter @ToString @Table(indexes={@Index(columnList="content"),@Index(columnList="createdAt"),@Index(columnList="createdBy")})
public class ArticleComment{@Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Long id; @Setter @ManyToOne(optional=false) private Article article; @Setter @Column(nullable=false, length=500) private String content;
@CreatedDate @Column(nullable=false) private LocalDateTime createdAt;@CreatedBy @Column(nullable=false, length=100) private String createdBy;@LastModifiedDate @Column(nullable=false) private LocalDateTime modifiedAt;@LastModifiedBy @Column(nullable=false, length=100) private String modifiedBy;
protected ArticleComment(){}
private ArticleComment(Article article, String content){this.article=article;this.content=content;}
public static ArticleComment of(Article article, String content){return new ArticleComment(article, content);}
@Override public boolean equals(Object o){if(this==o)return ture;if(!(o instanceof ArticleComment that))return false; return id != null&&id.equals(this.id);}
@Override public int hashCode(){return Objects.hash(id);}}

intellij -> services -> + -> rrun configuration type -> spring boot

intellij -> com.board.project.ArticleDto.java
public record ArticleDto(String title,String content,String hashtag,LocalDateTime createdAt,String createdBy,LocalDateTime modifiedAt,String modifiedBy)implements Serializable{}

intellij Article.java @Setter private String hashtag;코드 밑에 작성
@ToString.Exclude @OrderBy("id") @OneToMany(mappedBy="article", cascade=CascadeType.ALL) private final Set<ArticleComment>articleComments=new LinkedHashSet<>();

intellij -> com.board.project.repository.ArticleRepository.java
public interface ArticleRepository extends JpaRepository<Article,Long>{}

intellij -> com.board.project.repository.ArticleCommentRepository.java
public interface ArticleCommentRepository extends JpaRepository<ArticleComment,Long>{}

intellij -> ArticleRepository -> cmd+shift+t -> class name:JpaRepositoryTest
@DisplayName("JPA 연결 테스트")@Import(JpaConfig.class)@DataJpaTest class JpaRepositoryTest{private final ArticleRepository articleRepository; private final ArticleCommentRepository ArticleCommentRepository; public JpaRepositoryTest(@Autowired ArticleRepository articleRepository,@Autowired ArticleCommentRepository ArticleCommentRepository){this.articleRepository=articleRepository;this.articleCommentRepository=articleCommentRepository;}
@DisplayName("select 테스트")@Test void givenTestData_whenSelecting_thenWorksFine(){//given
//when
List<Article>articles=articleRepository.findAll();
//then
assertThat(articles).isNotNull().hasSize(0);
}}

-------03.데이터베이스접근로직테스트정리4
mockaroo
https://github.com/djkeh/fastcampus-project-board/blob/main/src/main/resources/data.sql 여기서 복사한 데이터 -> resources/data.sql파일안에 넣어둠.


intellij -> package com.board.project.repository
insert test
@DisplayName("insert test")@Test void givenTestData_whenInserting_thenWorksFine(){//given long previousCount=articleRepository.count();//when Article savedArticle=articleRepository.save(Article.of("new article","new content","#spring"))//Then assertThen(articleRepository.count()).isEqualTo(previousCount + 1);}

update test
@DisplayName("insert test")@Test void givenTestData_whenUpdating_thenWorksFine(){//given Article article=articleRepository.findById(1L).orElseThrow();String updatedHashtag="#springboot";article.setHashtag(updatedHashtag);//when Article savedArticle=articleRepository.saveAndFlush(article)//Then assertThen(savedArticle).hasFieldOrPropertyWithValue("hashtag",updatedHashtag);}

*junit -> saveAndFlush

delete test
@DisplayName("insert test")@Test void givenTestData_whenDeleting_thenWorksFine(){//given Article article=articleRepository.findById(1L).orElseThrow(); long previousArticleCount=articleRepository.count(); long previousArticleCommentCount=articleCommentRepository.count();int deletedCommentsSize=article.getArticleComments().size();


//when articleRepository.delete(article)//Then assertThat(articleRepository.count()).isEqualTo(previousArticleCount-1);assertThat(articleCommentReposit.count()).isEqualTo(previousArticleCommentCount-1)}


intellij -> config -> JpaConfig.java 
import밑에 @EnableJpaAuditing추가되어 있음.

intellij -> Article.java + ArticleComment.java
public class Article위에 @EntityListeners(AuditingEntityListener.class)붙여주기.

intellij -> application.yaml
spring: 제일 밑에 test.database.replace: none추가하기.
근데 이 내용 필요없다고 해서 그냥 하지말기.


gitkraken 전체적인 사용방법
새로운 코드를 작성하면 unstaged files에 뜸 -> commit하고 싶은 파일들만 staged files에 옮김. -> commit message작성 및 commit -> 다했으면 push -> 
github에서 request(project설정및 milestone) -> create pull request -> file changed에서 변경된 파일 확인. -> review changes -> merge pull request -> 









